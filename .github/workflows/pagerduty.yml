name: PagerDuty Rota Notifier
on:
  push:
  workflow_dispatch:
  schedule:
    - cron: 0 8 * * 1

jobs:
  WhosOnCall:
    runs-on: ubuntu-latest
    outputs:
      schedules: ${{ steps.schedules.outputs.response }}

    steps:
      - name: Fetch Rotas
        uses: fjogeleit/http-request-action@v1
        id: schedules
        if: always()
        with:
          url: https://api.pagerduty.com/oncalls?schedule_ids[]=PYJ6MPP&schedule_ids[]=P2SAWCS&schedule_ids[]=P51TQWY
          method: 'GET'
          contentType: application/json
          bearerToken: ${{ secrets.SLACK_TOKEN }}
          customHeaders: |
            {
              "Authorization": "Token token=${{ secrets.PAGERDUTY_TOKEN }}",
              "Content-Type": "application/vnd.pagerduty+json;version=2"
            }

      # - name: Format Date
      #   id: date
      #   run: |
      #     start_time=${{fromJson(steps.schedules.outputs.response).oncalls[0].start}}
      #     echo "::set-output name=date::$(date -d "$start_time" +'%r')"
      #     cp ./message.tmpl.json ./message.json

      # - name: Send to Slack                     
      #   if: always()
      #   uses: slackapi/slack-github-action@v1.18.0
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      #   with:
      #     payload: |
      #       {
      #         "text": "PagerDuty Rota Nofication",
      #         "blocks": [
      #           {
      #             "type": "header",
      #             "text": {
      #               "type": "plain_text",
      #               "text": ":clock530: New rota starts at ${{ steps.date.outputs.date }}"
      #             }
      #           }
      #         ]
      #       }

  CollectSchedules:
    runs-on: ubuntu-latest
    needs: WhosOnCall
    outputs:
      schedules: ${{ steps.set-users.outputs.schedules }}

    steps:
      - id: set-users
        run: |
          schedules=$(jq -c '[.oncalls[] | {scheduleName: .schedule.summary, scheduleUrl: .schedule.html_url, scheduleId: .schedule.id, userId: .user.id, start: .start, end: .end}]' <<< '${{ needs.WhosOnCall.outputs.schedules }}')
          echo "::set-output name=schedules::$schedules"

  UserMatrix:
    runs-on: ubuntu-latest
    needs: CollectSchedules
    outputs:
      PYJ6MPP: ${{ steps.set-user.outputs.PYJ6MPP }}
      P2SAWCS: ${{ steps.set-user.outputs.P2SAWCS }}
      P51TQWY: ${{ steps.set-user.outputs.P51TQWY }}

    strategy:
      fail-fast: false
      matrix:
        schedule: ${{ fromJson(needs.CollectSchedules.outputs.schedules) }}

    steps:
      - name: PagerDuty User
        uses: fjogeleit/http-request-action@v1
        id: pd-user
        if: always()
        with:
          url: https://api.pagerduty.com/users/${{ matrix.schedule.userId }}
          method: 'GET'
          contentType: application/json
          bearerToken: ${{ secrets.SLACK_TOKEN }}
          customHeaders: |
            {
              "Authorization": "Token token=${{ secrets.PAGERDUTY_TOKEN }}",
              "Content-Type": "application/vnd.pagerduty+json;version=2"
            }

      - name: Slack User
        uses: fjogeleit/http-request-action@v1
        if: always()
        id: slack-user
        with:
          url: https://slack.com/api/users.lookupByEmail?email=${{ fromJson(steps.pd-user.outputs.response).user.email }}
          method: 'GET'
          contentType: application/x-www-form-urlencoded
          bearerToken: ${{ secrets.SLACK_TOKEN }}

      # - id: set-matrix
      #   run: |
      #     echo ${{ matrix.schedule.userId }}

      - name: Prepend User
        id: set-user
        run: |
          user=$(jq -c -n \
            --arg userId "${{ fromJson(steps.slack-user.outputs.response).user.id }}" \
            --arg name "${{ matrix.schedule.scheduleName }}" \
            --arg url "${{ matrix.schedule.scheduleUrl }}" \
            --arg start "${{ matrix.schedule.start }}" \
            --arg end "${{ matrix.schedule.end }}" \
            '$ARGS.named')

          echo "::set-output name=${{ matrix.schedule.scheduleId }}::$user"

      # - name: Send to Slack                     
      #   if: always()
      #   uses: slackapi/slack-github-action@v1.18.0
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      #   with:
      #     payload: |
      #       {
      #         "text": "PagerDuty Rota Nofication",
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "fields": [{
      #               "type": "mrkdwn",
      #               "text": "<@${{ fromJson(steps.slack-user.outputs.response).user.id }}> - <${{ matrix.schedule.scheduleUrl }}|${{ matrix.schedule.scheduleName }}>"
      #             }]
      #           }
      #         ]
      #       }

  SendToSlack:
    runs-on: ubuntu-latest
    needs: UserMatrix
    steps:
      - name: ECHO
        run: |
          echo ${{ fromJson(needs.UserMatrix.outputs.PYJ6MPP).name }}
          echo ${{ fromJson(needs.UserMatrix.outputs.P2SAWCS).name }}
          echo ${{ fromJson(needs.UserMatrix.outputs.P51TQWY).name }}

      # - name: Send to Slack                     
      #   if: always()
      #   uses: slackapi/slack-github-action@v1.18.0
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      #   with:
      #     payload: |
      #       {
      #         "text": "PagerDuty Rota Nofication",
      #         "blocks": [
      #           {
      #             "type": "divider"
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*<fakeLink.toUserProfiles.com|Iris / Zelda 1-1>*\nTuesday, January 21 4:00-4:30pm\nBuilding 2 - Havarti Cheese (3)\n2 guests"
      #             },
      #             "accessory": {
      #               "type": "image",
      #               "image_url": "https://api.slack.com/img/blocks/bkb_template_images/notifications.png",
      #               "alt_text": "calendar thumbnail"
      #             }
      #           },
      #           {
      #             "type": "context",
      #             "elements": [
      #               {
      #                 "type": "image",
      #                 "image_url": "https://api.slack.com/img/blocks/bkb_template_images/notificationsWarningIcon.png",
      #                 "alt_text": "notifications warning icon"
      #               },
      #               {
      #                 "type": "mrkdwn",
      #                 "text": "*Conflicts with Team Huddle: 4:15-4:30pm*"
      #               }
      #             ]
      #           },
      #           {
      #             "type": "divider"
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*Rota personnel:*"
      #             }
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "${{ fromJson(needs.UserMatrix.outputs.PYJ6MPP).include }}"
      #             }
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*<fakelink.ToMoreTimes.com|Show more times>*"
      #             }
      #           }
      #         ]
      #       }



            