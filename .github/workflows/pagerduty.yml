name: PagerDuty Rota Notifier
on:
  push:
  workflow_dispatch:
  schedule:
    - cron: 0 8 * * 1

jobs:
  WhosOnCall:
    runs-on: ubuntu-latest
    outputs:
      schedules: ${{ steps.schedules.outputs.response }}

    steps:
      - name: Fetch Rotas
        uses: fjogeleit/http-request-action@v1
        id: schedules
        if: always()
        with:
          url: https://api.pagerduty.com/oncalls?schedule_ids[]=PYJ6MPP&schedule_ids[]=P2SAWCS&schedule_ids[]=P51TQWY
          method: 'GET'
          contentType: application/json
          bearerToken: ${{ secrets.SLACK_TOKEN }}
          customHeaders: |
            {
              "Authorization": "Token token=${{ secrets.PAGERDUTY_TOKEN }}",
              "Content-Type": "application/vnd.pagerduty+json;version=2"
            }

  CollectSchedules:
    runs-on: ubuntu-latest
    needs: WhosOnCall
    outputs:
      schedules: ${{ steps.set-users.outputs.schedules }}

    steps:
      - id: set-users
        run: |
          schedules=$(jq -c '[.oncalls[] | {scheduleName: .schedule.summary, scheduleUrl: .schedule.html_url, scheduleId: .schedule.id, userId: .user.id, start: .start, end: .end}]' <<< '${{ needs.WhosOnCall.outputs.schedules }}')
          echo "::set-output name=schedules::$schedules"

  UserMatrix:
    runs-on: ubuntu-latest
    needs: CollectSchedules
    outputs:
      PYJ6MPP: ${{ steps.set-user.outputs.PYJ6MPP }}
      P2SAWCS: ${{ steps.set-user.outputs.P2SAWCS }}
      P51TQWY: ${{ steps.set-user.outputs.P51TQWY }}

    strategy:
      fail-fast: false
      matrix:
        schedule: ${{ fromJson(needs.CollectSchedules.outputs.schedules) }}

    steps:
      - name: PagerDuty User
        uses: fjogeleit/http-request-action@v1
        id: pd-user
        if: always()
        with:
          url: https://api.pagerduty.com/users/${{ matrix.schedule.userId }}
          method: 'GET'
          contentType: application/json
          bearerToken: ${{ secrets.SLACK_TOKEN }}
          customHeaders: |
            {
              "Authorization": "Token token=${{ secrets.PAGERDUTY_TOKEN }}",
              "Content-Type": "application/vnd.pagerduty+json;version=2"
            }

      - name: Slack User
        uses: fjogeleit/http-request-action@v1
        if: always()
        id: slack-user
        with:
          url: https://slack.com/api/users.lookupByEmail?email=${{ fromJson(steps.pd-user.outputs.response).user.email }}
          method: 'GET'
          contentType: application/x-www-form-urlencoded
          bearerToken: ${{ secrets.SLACK_TOKEN }}

      - name: Prepend User
        id: set-user
        run: |
          start_time=$(TZ=:Europe/London date -d "${{ matrix.schedule.start }}" +'%a, %b %d @%-I%M %p')
          end_time=$(TZ=:Europe/London date -d "${{ matrix.schedule.end }}" +'%a, %b %d @%-I%M %p')

          user=$(jq -c -n \
            --arg userId "${{ fromJson(steps.slack-user.outputs.response).user.id }}" \
            --arg name "${{ matrix.schedule.scheduleName }}" \
            --arg url "${{ matrix.schedule.scheduleUrl }}" \
            --arg start "$start_time" \
            --arg end "$end_time" \
            '$ARGS.named')

          echo "::set-output name=${{ matrix.schedule.scheduleId }}::$user"

  SendToSlack:
    runs-on: ubuntu-latest
    needs: UserMatrix
    steps:
      - id: set-week
        run: |
          week=$(TZ=:Europe/London date +'%V')
          start=$(TZ=:Europe/London date +'%b %d')
          end=$(TZ=:Europe/London date -d '+7 days' +'%b %d')
          
          echo "::set-output name=week::$week"
          echo "::set-output name=start::$start"
          echo "::set-output name=end::$end"

      - name: Send to Slack                     
        if: always()
        uses: slackapi/slack-github-action@v1.18.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "text": "PagerDuty Rota Nofication",
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*On-call rotation change*\n${{ steps.set-week.outputs.start }} - ${{ steps.set-week.outputs.end }}, Week #${{ steps.set-week.outputs.week }}\n3 Schedules"
                  },
                  "accessory": {
                    "type": "image",
                    "image_url": "https://api.slack.com/img/blocks/bkb_template_images/notifications.png",
                    "alt_text": "calendar thumbnail"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Going on call:*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":clock530: <@${{ fromJson(needs.UserMatrix.outputs.PYJ6MPP).userId }}> - <${{ fromJson(needs.UserMatrix.outputs.PYJ6MPP).url }}|${{ fromJson(needs.UserMatrix.outputs.PYJ6MPP).name }}>\n${{ fromJson(needs.UserMatrix.outputs.PYJ6MPP).start }} to ${{ fromJson(needs.UserMatrix.outputs.PYJ6MPP).end }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":clock530: <@${{ fromJson(needs.UserMatrix.outputs.P2SAWCS).userId }}> - <${{ fromJson(needs.UserMatrix.outputs.P2SAWCS).url }}|${{ fromJson(needs.UserMatrix.outputs.P2SAWCS).name }}>\n${{ fromJson(needs.UserMatrix.outputs.P2SAWCS).start }} to ${{ fromJson(needs.UserMatrix.outputs.P2SAWCS).end }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":clock530: <@${{ fromJson(needs.UserMatrix.outputs.P51TQWY).userId }}> - <${{ fromJson(needs.UserMatrix.outputs.P51TQWY).url }}|${{ fromJson(needs.UserMatrix.outputs.P51TQWY).name }}>\n${{ fromJson(needs.UserMatrix.outputs.P51TQWY).start }} to ${{ fromJson(needs.UserMatrix.outputs.P51TQWY).end }}"
                  }
                }
              ]
            }



            